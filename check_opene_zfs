#!/usr/bin/perl -w

package SNMP;
	use strict;
	use Data::Dumper;
	use Net::SNMP 6.0 qw( :snmp DEBUG_ALL ENDOFMIBVIEW );	
	sub new {
		my ($class, $host, $community, $mib) = @_;

		my $self={
			nametable => $mib
		};
		bless $self, $class;

		$self->reversemap();
		$self->snmp_new_session($host, $community);

		return $self;
	}

	sub snmp_new_session {
		my ($self, $host, $community) = @_;

                my ($session,$error)=Net::SNMP->session(
			Hostname => $host,
			Version	 => 2,
			Timeout  => 2,
			Community => $community
		);

		if (!defined($session)) {
			die($error);
		}

		$self->{netsnmp}=$session;
	}

	sub reversemap {
		my ($self) = @_;
		foreach my $key ( keys %{$self->{nametable}} ) {
			my $value=$self->{nametable}{$key};
			$self->{reversetable}{$value->{oid}}=$key;
		}
	}

	sub name2oid {
		my ($self, $mixname) = @_;

		my ($name, $instance) = ($mixname =~ /^([^.]+)([\d\.]*)$/);
		my $oid=$self->{nametable}{$name}{oid} . $instance;

		#printf("Mixname $mixname Name: $name instance $instance oid $oid\n");

		return $oid;
	}

	sub oid2name {
		my ($self, $oid) = @_;
		my ($full, $name, $instance) = $self->oid2name_all($oid);
		return $full;
	}

	sub instance_decode_string {
		my ($self, $instance) = @_;

		# .100.97.116.97.51 = STRING: "data3"
		my $string="";	
		while($instance =~ s/^\.(\d+)//) {
			$string.=chr($1);
		}
		return $string
	}

	sub instance_decode_uuidnum {
		my ($self, $instance) = @_;
		# .36.49.48.51.99.55.102.100.100.45.51.50.56.99.45.54.102.98.101.45.98.55.55.55.45.100.57.98.50.102.48.98.48.50.49.97.57.1
		$instance =~ s/^\.//;
		my @elem=split(/\./, $instance);
		my $count=shift @elem;
		my $uuid=join("", map { chr($_) } splice(@elem, 0, $count));

		return sprintf('"%s".%s', $uuid, join(".", @elem));
	}


	sub value_decode_table {
		my ($self, $value, $def) = @_;

		my $tvalue=$def->{values}{$value} // "unknown";
		if (defined($tvalue)) {
			return { value => $value, string => $tvalue, full => sprintf("%s(%d)", $tvalue, $value) };
		}

		return { value => $value };
	}

	sub value_decode_fixup_decimal {
		my ($self, $value, $def) = @_;

		$value=~s/,//g;

		return { value => $value };
	}

	sub value_decode {
		my ($self, $name, $value) = @_;

		my $def=$self->{nametable}{$name};
		if (!defined($def) || !defined($def->{value})) {
			return { value => $value };
		}

		if ($def->{value} eq "table") {
			return $self->value_decode_table($value, $def);
		} elsif ($def->{value} eq "fixupdecimal") {
			return $self->value_decode_fixup_decimal($value, $def);
		}

		return { value => $value };
	}

	sub instance_decode {
		my ($self, $name, $instance) = @_;

		my $def=$self->{nametable}{$name};
		if (!defined($def) || !defined($def->{instance})) {
			return $instance;
		}

		if ($def->{instance} eq 'string') {
			return $self->instance_decode_string($instance);
		} elsif ($def->{instance} eq 'uuidnum') {
			return $self->instance_decode_uuidnum($instance);
		}

		return $instance;
	}

	sub oid2name_all {
		my ($self, $oid) = @_;

		# We had agents which returned spaces
		$oid =~ s/^\s+|\s+$//g;

		my $instance="";
		while(length($oid) > 1) {
			my $name=$self->{reversetable}{$oid};
			if (defined($name)) {
				return ( $name . $instance, $name, $self->instance_decode($name, $instance) );
			}

			$oid =~ s/(\.\d+)$//;
			if (!defined($1)) {
				return( $oid, undef, undef );
			}
			$instance=$1 . $instance;
		}
		die("OID Problem: $oid $instance");
	}

	sub _parse_request {
		my $self=shift;
		my @request=map { $self->name2oid($_) } @_;
		return \@request;
	}

	sub _parse_response {
		my ($self, $roid, $error) = @_;

		my $r={};
		foreach my $k ( keys %{$roid} ) {
			my $value=$roid->{$k};
			my ($full, $name, $instance)=$self->oid2name_all($k);
			$r->{$full}={ name => $name, instance => $instance, value => $self->value_decode($name, $value) };
		}

		$r->{_error}=$error;

		return $r;
	}
	
	sub get {
		my ($self, @args) = @_;

		my $r=$self->{netsnmp}->get_request(-varbindlist =>
			$self->_parse_request(@args));

		return $self->_parse_response($r, $self->{netsnmp}->error());
	}

	sub get_table {
		my ($self, $base) = @_;

		my $r=$self->{netsnmp}->get_table(-baseoid => $self->name2oid($base));
		return $self->_parse_response($r, $self->{netsnmp}->error());
	}

	sub bulkwalk {
		my ($self, $base) = @_;

		my $table={};
		my $baseoid=$self->name2oid($base);
		my $s=$self->{netsnmp};

		my %result;
		my $lastoid=$baseoid;
		walk: while(42) {
			my $r=$s->get_bulk_request(
					-varbindlist => [ $lastoid ],
					-maxrepetitions => 8
				);

			print Dumper($r);

			my @oids = $s->var_bind_names();
			if (scalar @oids == 0) {
				last walk;
			}

			for my $oid (sort @oids) {
				if ($s->var_bind_types()->{$oid} == ENDOFMIBVIEW) {
					last walk;
				}
				if (oid_lex_cmp($lastoid, $oid) >= 0) {
					last walk;
				}
				if (!oid_base_match($baseoid, $oid)) {
					last walk;
				}

				$result{$oid}=$r->{$oid};

				$lastoid = $oid
			}
		}

		return $self->_parse_response(\%result, $self->{netsnmp}->error());
	}
1;


sub merge_tables_by_instance {
	my ($self, @tables) = @_;

	my $result={};

	foreach my $table ( @tables ) {
		foreach my $k ( keys %${table} ) {
			next if ($k =~ /_error/);
			my $v=$table->{$k};

			my $i=$v->{instance};
			$i=~s/^\.//;
			$result->{$i}{$v->{name}}=$v->{value};
		}
	}

	return $result;
}


use strict;
use open IO => ":encoding(utf-8)";
use open ':std';
use Data::Dumper;
use POSIX;

use Monitoring::Plugin;
use Getopt::Long::Descriptive;
use FindBin qw($Bin $Script);

my $mib_opene_upto_29r4={
	"sysDescr"		=> { oid => ".1.3.6.1.2.1.1.1" },
	"sysName"		=> { oid => ".1.3.6.1.2.1.1.5" },

	"zfsFilesystemName"	=> { oid => ".1.3.6.1.4.1.25359.1.1.1" },
	"zfsPoolHealth"		=> { oid => ".1.3.6.1.4.1.25359.1.1.4" ,
						value => 'table',
						values => {
							1 => "online",
							2 => "degraded",
							3 => "faulted",
							4 => "unknown"
						}
					},
	"zfsARCSizeKB"		=> { oid => ".1.3.6.1.4.1.25359.1.2.1" },
	"zfsARCMetadataSizeKB"	=> { oid => ".1.3.6.1.4.1.25359.1.2.2" },
	"zfsARCDataSizeKB"	=> { oid => ".1.3.6.1.4.1.25359.1.2.3" },
	"zfsARCHits"		=> { oid => ".1.3.6.1.4.1.25359.1.2.4" },
	"zfsARCMisses" 		=> { oid => ".1.3.6.1.4.1.25359.1.2.5" },
	"zfsARCTargetSize"	=> { oid => ".1.3.6.1.4.1.25359.1.2.6" },
	"zfsARCMru"		=> { oid => ".1.3.6.1.4.1.25359.1.2.7" },

	"zfsL2ARCHits"		=> { oid => ".1.3.6.1.4.1.25359.1.3.1" },
	"zfsL2ARCMisses"	=> { oid => ".1.3.6.1.4.1.25359.1.3.2" },
	"zfsL2ARCReads"		=> { oid => ".1.3.6.1.4.1.25359.1.3.3" },
	"zfsL2ARCWrites"	=> { oid => ".1.3.6.1.4.1.25359.1.3.4" }
};

my $mib_opene_from_30={
	"sysDescr"		=> { oid => ".1.3.6.1.2.1.1.1" },
	"sysName"		=> { oid => ".1.3.6.1.2.1.1.5" },

	"zfsFilesystemName"	=> { oid => ".1.3.6.1.4.1.25359.1.1.2" },
	"zfsPoolHealth"		=> { oid => ".1.3.6.1.4.1.25359.1.1.7" ,
						value => 'table',
						values => {
							1 => "online",
							2 => "degraded",
							3 => "faulted",
							4 => "unknown"
						}
					},
	"zfsARCSize"		=> { oid => ".1.3.6.1.4.1.25359.1.4.1" },
	"zfsARCMetadataSize"	=> { oid => ".1.3.6.1.4.1.25359.1.4.2" },
	"zfsARCDataSize"	=> { oid => ".1.3.6.1.4.1.25359.1.4.3" },
	"zfsARCHits"		=> { oid => ".1.3.6.1.4.1.25359.1.4.4" },
	"zfsARCMisses" 		=> { oid => ".1.3.6.1.4.1.25359.1.4.5" },
	"zfsARCTargetSize"	=> { oid => ".1.3.6.1.4.1.25359.1.4.6" },
	"zfsARCMru"		=> { oid => ".1.3.6.1.4.1.25359.1.4.7" },

	"zfsL2ARCHits"		=> { oid => ".1.3.6.1.4.1.25359.1.5.1" },
	"zfsL2ARCMisses"	=> { oid => ".1.3.6.1.4.1.25359.1.5.2" },
	"zfsL2ARCReads"		=> { oid => ".1.3.6.1.4.1.25359.1.5.3" },
	"zfsL2ARCWrites"	=> { oid => ".1.3.6.1.4.1.25359.1.5.4" }
};


# This function checks whether the SNMP table zfsFilesystemName looks sane.
# OpenE decided it was a good idea to reuse OIDs for different names and types
# which one should NEVER do. So we have 2 conflicting mibs and no way to check
# for the version of the Software as its not returned in iso or enterprises mib.
#
# So we try to guess - if zfsFilesystem names are all numeric - it seems to be
# a newer openE version and most likely a broken SNMP mib.
sub results_valid {
	my ($names) = @_;

	my @f=grep { /^\d+$/ }
		map { $names->{$_}{value}{value} }
		grep { /zfsFilesystem/ }
		keys %{$names};

	return scalar @f == 0;
}

sub read_arc_perfdata_new {
	my ($snmp, $np) = @_;

	my $l2arc = $snmp->get(
			"zfsL2ARCHits",
			"zfsL2ARCMisses",
			"zfsL2ARCReads",
			"zfsL2ARCWrites");
	
	$np->add_perfdata(label => "zfsL2ARCHits", value => $l2arc->{"zfsL2ARCHits"}{value}{value}, uom => 'c');
	$np->add_perfdata(label => "zfsL2ARCMisses", value => $l2arc->{"zfsL2ARCMisses"}{value}{value}, uom => 'c');
	$np->add_perfdata(label => "zfsL2ARCReads", value => $l2arc->{"zfsL2ARCReads"}{value}{value}, uom => 'c');
	$np->add_perfdata(label => "zfsL2ARCWrites", value => $l2arc->{"zfsL2ARCWrites"}{value}{value}, uom => 'c');

	my $vars = $snmp->get("zfsARCSize",
			"zfsARCMetadataSize",
			"zfsARCDataSize",
			"zfsARCHits",
			"zfsARCMisses",
			"zfsARCTargetSize",
			"zfsARCMru");

	$np->add_perfdata(label => "zfsARCSizeKB", value => int($vars->{"zfsARCSize"}{value}{value}/1024), uom => 'KB');
	$np->add_perfdata(label => "zfsARCMetadataSizeKB", value => int($vars->{"zfsARCMetadataSize"}{value}{value}/1024), uom => 'KB');
	$np->add_perfdata(label => "zfsARCDataSizeKB", value => int($vars->{"zfsARCDataSize"}{value}{value}/1024), uom => 'KB');
	$np->add_perfdata(label => "zfsARCHits", value => $vars->{"zfsARCHits"}{value}{value}, uom => 'c');
	$np->add_perfdata(label => "zfsARCMisses", value => $vars->{"zfsARCMisses"}{value}{value}, uom => 'c');
}

sub read_arc_perfdata_old {
	my ($snmp, $np) = @_;

	my $vars = $snmp->get("zfsARCSizeKB.0",
			"zfsARCMetadataSizeKB.0",
			"zfsARCDataSizeKB.0",
			"zfsARCHits.0",
			"zfsARCMisses.0",
			"zfsARCTargetSize.0",
			"zfsARCMru.0",
			"zfsL2ARCHits.0",
			"zfsL2ARCMisses.0",
			"zfsL2ARCReads.0",
			"zfsL2ARCWrites.0");

	if ($vars->{"zfsARCSizeKB.0"}{value}{value} =~ /noSuchInstance/i) {
		return;
	}

	$np->add_perfdata(label => "zfsARCSizeKB", value => $vars->{"zfsARCSizeKB.0"}{value}{value}, uom => 'KB');
	$np->add_perfdata(label => "zfsARCMetadataSizeKB", value => $vars->{"zfsARCMetadataSizeKB.0"}{value}{value}, uom => 'KB');
	$np->add_perfdata(label => "zfsARCDataSizeKB", value => $vars->{"zfsARCDataSizeKB.0"}{value}{value}, uom => 'KB');
	$np->add_perfdata(label => "zfsARCHits", value => $vars->{"zfsARCHits.0"}{value}{value}, uom => 'c');
	$np->add_perfdata(label => "zfsARCMisses", value => $vars->{"zfsARCMisses.0"}{value}{value}, uom => 'c');

	$np->add_perfdata(label => "zfsL2ARCHits", value => $vars->{"zfsL2ARCHits.0"}{value}{value}, uom => 'c');
	$np->add_perfdata(label => "zfsL2ARCMisses", value => $vars->{"zfsL2ARCMisses.0"}{value}{value}, uom => 'c');
	$np->add_perfdata(label => "zfsL2ARCReads", value => $vars->{"zfsL2ARCReads.0"}{value}{value}, uom => 'c');
	$np->add_perfdata(label => "zfsL2ARCWrites", value => $vars->{"zfsL2ARCWrites.0"}{value}{value}, uom => 'c');

	return 1;
}


my ($opt, $usage) = describe_options(
	"$Script %o <some-arg>",
	[ 'host|H=s',		"OpenE hostname", { required => 1 } ],
	[ 'community|C=s',	"OpenE SNMP community", { default => 'public' } ],
	[ 'timeout|t=i',	"Timeout", { default => 15 } ],
	[ 'debug',		"Debug"],
	[],
	[ 'help',               "print usage message and exit", { shortcircuit => 1 } ],
);

print($usage->text), exit if $opt->help;

my $np = Monitoring::Plugin->new(
	timeout => $opt->timeout
);

my $snmp=new SNMP($opt->host, $opt->community, $mib_opene_upto_29r4);
my $names=$snmp->get_table("zfsFilesystemName");

my $openeversion=29;
# OpenE >v30 returns bullshit with old OIDs. Check heuristically
# and if the results looks bogus - try the new OID.
if (!results_valid($names)) {
	$np->add_message(OK, "New openE version detected");
	$snmp=new SNMP($opt->host, $opt->community, $mib_opene_from_30);
	$names=$snmp->get_table("zfsFilesystemName");
	$openeversion=30;
}
my $states=$snmp->get_table("zfsPoolHealth");
my $namehealth=$snmp->merge_tables_by_instance($names, $states);

foreach ( values %{$namehealth} ) {
	my $value=$_->{zfsPoolHealth}{value};
	$np->add_message($value == 1 ? OK : CRITICAL, 
		sprintf("%s %s",
			$_->{zfsFilesystemName}{value},
			$_->{zfsPoolHealth}{full}));
}

if ($openeversion <= 29) {
	read_arc_perfdata_old($snmp, $np);
} else {
	read_arc_perfdata_new($snmp, $np);
}

my ($code, $message) = $np->check_messages();
$np->plugin_exit( $code, $message );
